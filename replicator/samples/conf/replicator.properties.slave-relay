#################################
# REPLICATOR.PROPERTIES.DIRECT  #
#################################
#
# This file contains properties for MySQL replication.
#
# NOTE TO ALL USERS:  Blank property values are assigned as empty strings. 
# To assign the default value, comment out the key=value assignment.
#
# NOTE TO WINDOWS USERS:  Single backslash characters are treated as escape 
# characters.  You must use forward slash (/) or double backslashes in file 
# names. 

#################################
# GLOBAL REPLICATOR PARAMETERS  #
#################################

# Database connection information. 
replicator.global.db.host=@{APPLIER.REPL_DBHOST}
replicator.global.db.port=@{APPLIER.REPL_DBPORT}
replicator.global.db.user=@{APPLIER.REPL_DBLOGIN}
replicator.global.db.password=@{APPLIER.REPL_DBPASSWORD}

# Replicator role.  You must specify a value that corresponds to a 
# pipeline name like master, slave, direct, etc.  There is no default 
# for this value--it must be set or the replicator will not go online.  
replicator.role=@{REPL_ROLE}

# If the following property is true, we are replacing native slave 
# replication.  We start extraction from the MySQL slave position 
# and write slave restart coordinates each time the replicator goes 
# offline cleanly.  It should be false in all other cases. 
replicator.nativeSlaveTakeover=@{REPL_SVC_NATIVE_SLAVE_TAKEOVER}

# URI to which we connect when this replicator is a slave.   
replicator.master.connect.uri=@{REPL_MASTER_URI}

# URI for our listener when we are acting as a master.  Slaves 
# use this as their connect URI.
replicator.master.listen.uri=thl://@{HOST.HOST}:@{REPL_SVC_THL_PORT}/

# Force replicator to check if THL is in sync with database. 
# This check is enabled by default. Set the following property 
# to false in order to disable the check.
# replicator.master.thl_check=true

# Replicator auto-enable.  If true, replicator automatically goes online 
# at start-up time. 
replicator.auto_enable=@{REPL_AUTOENABLE}

# Determines whether replication service is started up
# as a thread internal to the ReplicationServiceManager or
# whether it runs in a separate, detached JVM.
replicator.detached=false

# Source ID. This required parameter is used to identify replication
# event source.  It must be unique for each replicator node.
replicator.source_id=@{EXTRACTOR.REPL_DBHOST}

# Site to which the replicator belongs.
site.name=default

# Cluster name to which the replicator belongs.
cluster.name=@{CLUSTERNAME}

# Replication service type.  Values are 'remote' or 'local'.  Local services 
# do not log updates to Tungsten catalogs.  Remote services do log them. 
replicator.service.type=@{REPL_SVC_SERVICE_TYPE}

# Name of this replication service.  
service.name=@{SERVICE.DEPLOYMENT_SERVICE}

# Name of the local replication service.  This parameter must be set when 
# performing bi-directional replication using a remote slave.  Events 
# generated by this service are dropped, thereby preventing replication 
# loops.  It may not be the same as the value of service.name if the service
# is remote. 
local.service.name=@{SERVICE.DSNAME}

# Whether to log slave updates or not.  This is normally false but can
# be enabled so that updates inserted into the slave can be extracted again
# by another replicator.  This can be useful for multi-master and some
# chained replication topologies.
replicator.log.slave.updates=@{LOG_SLAVE_UPDATES}

# Whether slave updates have a privileged account for updates.  Certain
# stores such as Amazon RDS do not allow slave to have superuser privileges.
# If this values is false we try to apply using non-superuser capabilites.
replicator.privileged.slave.update=@{SLAVE_PRIVILEGED_UPDATES}

# Schema to store Replicator catalog tables. 
replicator.schema=@{REPL_SVC_SCHEMA}

# Engine used for Replicator catalog tables. If it is undefined or empty, 
# tungsten will use mysql default storage engine. By default,
# it is set to use innodb.
replicator.table.engine=@{REPL_SVC_TABLE_ENGINE}

# Global queue size for pipelines.  This defines the number of events
# buffered between stages.  Values greater than 1 improve performance
# dramatically but mean that you need to have enough heap memory to
# handle blobs and large transaction fragments.
replicator.global.buffer.size=@{REPL_BUFFER_SIZE}

# For parallel replication we have a global apply thread count. 1 means
# that apply is single threaded. 
replicator.global.apply.channels=@{REPL_SVC_CHANNELS}

# Policy for shard assignment based on default database.  If 'stringent', use
# default database only if SQL is recognized.  For 'relaxed' always use the 
# default database if it is available. 
replicator.shard.default.db=@{REPL_SVC_SHARD_DEFAULT_DB}

# Used by manager to create datasources dynamically
replicator.resourceJdbcUrl=@{APPLIER.REPL_DBJDBCURL}
replicator.resourceJdbcDriver=@{APPLIER.REPL_DBJDBCDRIVER}
replicator.resourceVendor=@{APPLIER.REPL_DBJDBCVENDOR}
replicator.resourcePrecedence=99
replicator.vipInterface=eth0:0
replicator.vipAddress=192.168.0.1
replicator.resourceLogPattern=
replicator.resourceLogDir=
replicator.resourcePort=${replicator.global.db.port}
replicator.resourceDataServerHost=${replicator.global.db.host}

##########################
# OPEN REPLICATOR PLUGIN #
##########################

# Available OpenReplicator providers
replicator.plugin.tungsten=com.continuent.tungsten.replicator.management.tungsten.TungstenPlugin
replicator.plugin.script=com.continuent.tungsten.replicator.management.script.ScriptPlugin

# Chosen OpenReplicator provider
replicator.plugin=tungsten

#################################
# REPLICATOR PIPELINES          #
#################################

# Generic pipelines.
replicator.pipelines=slave-relay

# RELAY PIPELINE:  Extract from a remote THL to a local THL
replicator.pipeline.slave-relay=remote-to-relay-thl
replicator.pipeline.slave-relay.stores=thl
replicator.pipeline.slave-relay.services=channel-assignment
replicator.pipeline.slave-relay.syncTHLWithExtractor=false

replicator.stage.remote-to-relay-thl=com.continuent.tungsten.replicator.pipeline.SingleThreadStageTask
replicator.stage.remote-to-relay-thl.extractor=thl-remote
replicator.stage.remote-to-relay-thl.applier=thl-applier
replicator.stage.remote-to-relay-thl.filters=

#################################
# TRANSACTION HISTORY LOG (THL) #
#################################

# NOTE:  If you run multiple replication services, beware of collisions 
# on log file names and THL lister ports. 

# Set the THL storage implementation class.  All replicators now use
# a single implementation. 
replicator.store.thl=com.continuent.tungsten.replicator.thl.THL

# All THL implementations require database access to store metadata. 
replicator.store.thl.url=@{APPLIER.REPL_DBTHLURL}
replicator.store.thl.user=${replicator.global.db.user}
replicator.store.thl.password=${replicator.global.db.password}

# Uncomment the following properties to control disk log storage location
# and size of files.  These are default values.  NOTE:  naming the logs by 
# service name is critical to prevent replication services from overwriting
# other service logs. 
replicator.store.thl.log_dir=@{SERVICE.REPL_LOG_DIR}
replicator.store.thl.log_file_size=@{REPL_THL_LOG_FILE_SIZE}

# The following propertie tells the THL server how long, as a maximum,
# in milliseconds, to block during an accept() call.  This interval, in turn
# will be directly factored into the amount of time a replicator will
# take to transition to the offline state on systems whose
# kernels or Java runtime won't allow for the interruption of a blocking
# accept() call.  If this interval is too short, it may result in problems 
# with new client connections, and if too long, will result in excessively
# slow transitions to offline etc.
replicator.thl.server.accept.timeout=5000


# Change the following property to control the buffer size used for THL
# I/O operations.  The default of 128k seems to work well. 
replicator.store.thl.bufferSize=131072

# The flush interval is the number of milliseconds that log writes may delay
# before being forced to storage.  0 means that every flush call flushes 
# immediately.  Larger values can help buffer writes but add latency to 
# pipelines.  This value only takes effect when fsyncOnFlush=true. 
replicator.store.thl.flushIntervalMillis=500

# Flush operations normally release writes to the OS but do
# not force them to storage.  You may request a full fsync on each flush by
# setting the following property to true.  This makes log updates more
# durable.  If you do this the flush interval should be relatively large to
# avoid impacting overall throughput or you should put the log on  
# high-performance storage to reduce fsync overhead.
replicator.store.thl.fsyncOnFlush=@{REPL_THL_LOG_FSYNC}

# To drop log files after a certain period, set the retention to an interval
# which is <number>{d|h|m|s}, where the letters stand for days, hours, minutes,
# or seconds respectively.  If unset logs are retained indefinitely.
replicator.store.thl.log_file_retention=@{REPL_THL_LOG_RETENTION}

# The THL serialization for events is pluggable.  The default is Protobuf
# serialization which is relatively fast and compact.  Java serialization
# is also provided but is experimental.
replicator.store.thl.event_serializer=com.continuent.tungsten.replicator.thl.serializer.ProtobufSerializer

# The disk log can compute checksums automatically on log records.  This
# is enabled by default but can cut performance by 50% or more.  Set false
# for faster log performance.
replicator.store.thl.doChecksum=@{REPL_THL_DO_CHECKSUM}

# Maximum number of events to transfer at once.  Higher values are better
# but as with queue store sizes require more memory.
replicator.thl.protocol.buffer_size=10

# THL listener address for remote access.  To listen on all ports, 
# use a value like thl://0.0.0.0:2112/.  (2112 is default
# port for Tungsten configurations.)  Note that this URI must provide
# a listener that corresponds to the URL in replicator.master.listen.uri, or 
# slaves may connect to the wrong port. 
replicator.store.thl.storageListenerUri=thl://0.0.0.0:@{REPL_SVC_THL_PORT}

# The transfer rate between the master and the slave can be improved
# by setting the following setting to a value greater than 1, which
# is the default.  In doing so, this will also require more memory
# on the master side.
replicator.store.thl.resetPeriod=1

# Do not allow this replication service to make any changes to the THL files
replicator.store.thl.readOnly=@{REPL_SVC_THL_READ_ONLY}

##############
# EXTRACTORS #
##############

# Remote THL extractor. 
replicator.extractor.thl-remote=com.continuent.tungsten.replicator.thl.RemoteTHLExtractor
replicator.extractor.thl-remote.connectUri=${replicator.master.connect.uri}
# If true, check to ensure logs are consistent.  
replicator.extractor.thl-remote.checkSerialization=true
# Set requested interval in milliseconds for heartbeat events from remote THL.
replicator.extractor.thl-remote.heartbeatInterval=3000
# Set preferred THL server role.  Common values are master, slave, or empty 
# (i.e., no value).
replicator.extractor.thl-remote.preferredRole=@{REPL_MASTER_PREFERRED_ROLE}

############
# APPLIERS #
############

# Local THL applier. 
replicator.applier.thl-applier=com.continuent.tungsten.replicator.thl.THLStoreApplier
replicator.applier.thl-applier.storeName=thl

###########
# FILTERS # 
###########

@{REPL_SVC_FILTER_CONFIG}

#####################
# PIPELINE SERVICES #
#####################

# Channel service to manage shard-to-channel assignment in parallel
# replication.  Must be enabled to use round-robin assignment in
# shard.list.  The number of configured channels must be correctly configured
# to avoid replication errors. 
replicator.service.channel-assignment=com.continuent.tungsten.replicator.channel.ChannelAssignmentService
replicator.service.channel-assignment.url=@{APPLIER.REPL_DBTHLURL}
replicator.service.channel-assignment.channels=${replicator.global.apply.channels}

####################################################
# ERROR-HANDLING AND CONSISTENCY-CHECKING POLICIES #
####################################################

# How to react on extractor failure. Possible values are 'stop' or 'warn'. 
replicator.extractor.failure_policy=stop

# How to react on applier failure. Possible values are 'stop' or 'warn'. 
replicator.applier.failure_policy=stop

# Event checksum algorithm.  Possible values are 'crc' or 'none'.
replicator.event.checksum=none

# How to react on consistency check failure.  Possible values are 'stop' or 
# 'warn'. 
replicator.applier.consistency_policy=@{REPL_CONSISTENCY_POLICY}

# Should consistency check be sensitive to column names and/or types? Settings
# on a slave must be identical to master's. Values are 'true' or 'false'.
replicator.applier.consistency_column_names=true
# TUC-20:  Must disable column type checking when going from
# Connector/J on master to drizzle on slave.
replicator.applier.consistency_column_types=false
